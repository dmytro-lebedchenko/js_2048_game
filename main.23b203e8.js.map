{"version":3,"sources":["scripts/main.js"],"names":["fieldCells","document","querySelectorAll","gameScore","querySelector","button","messageStart","messageWin","messageLose","messageRules","emptyGameField","gameField","rows","cols","hasEmptyCell","x","y","randomizer","foundStatus","Math","floor","random","cell","getElementById","innerText","classList","add","updateCell","value","move","row","filterZero","el","filter","newRow","i","length","push","verticalMove","direction","reverse","horizontalMove","gameStart","cellIndex","id","gameWin","remove","contains","replace","gameOver","addEventListener","key","code"],"mappings":"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","file":"main.23b203e8.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst fieldCells = document.querySelectorAll('.field-cell');\nconst gameScore = document.querySelector('.game-score');\nconst button = document.querySelector('.button');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageRules = document.querySelector('.message-rules');\n\nconst emptyGameField = () => [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet gameField = emptyGameField();\n\nconst rows = 4;\nconst cols = 4;\n\nfunction hasEmptyCell() {\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      if (gameField[x][y] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction randomizer() {\n  if (!hasEmptyCell()) {\n    return;\n  }\n\n  let foundStatus = false;\n\n  while (!foundStatus) {\n    const x = Math.floor(Math.random() * rows);\n    const y = Math.floor(Math.random() * cols);\n\n    if (gameField[x][y] === 0) {\n      gameField[x][y] = Math.random() < 0.1 ? 4 : 2;\n\n      const cell = document.getElementById(`${x}-${y}`);\n\n      cell.innerText = '2';\n      cell.classList.add('field-cell--2');\n\n      foundStatus = true;\n    }\n  }\n}\n\nfunction updateCell(cell, value) {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (value > 0) {\n    cell.innerText = value;\n    cell.classList.add(`field-cell--${value}`);\n  }\n}\n\nfunction move(row) {\n  const filterZero = (el) => el.filter(value => value !== 0);\n\n  let newRow = filterZero(row);\n\n  for (let i = 0; i < newRow.length; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n\n      gameScore.innerText = `${+gameScore.innerText + newRow[i]}`;\n    }\n  }\n\n  newRow = filterZero(newRow);\n\n  while (newRow.length < cols) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction verticalMove(direction) {\n  for (let y = 0; y < cols; y++) {\n    let row = [\n      gameField[0][y],\n      gameField[1][y],\n      gameField[2][y],\n      gameField[3][y],\n    ];\n\n    if (direction === 'up') {\n      row = move(row);\n    } else {\n      row.reverse();\n      row = move(row);\n      row.reverse();\n    }\n\n    for (let x = 0; x < cols; x++) {\n      gameField[x][y] = row[x];\n\n      const cell = document.getElementById(`${x}-${y}`);\n      const value = gameField[x][y];\n\n      updateCell(cell, value);\n    }\n  }\n}\n\nfunction horizontalMove(direction) {\n  for (let x = 0; x < rows; x++) {\n    let row = gameField[x];\n\n    if (direction === 'left') {\n      row = move(row);\n\n      gameField[x] = row;\n    } else {\n      row.reverse();\n      row = move(row);\n      row.reverse();\n\n      gameField[x] = row;\n    }\n\n    for (let y = 0; y < cols; y++) {\n      const cell = document.getElementById(`${x}-${y}`);\n      const value = gameField[x][y];\n\n      updateCell(cell, value);\n    }\n  }\n};\n\nfunction gameStart() {\n  gameField = emptyGameField();\n\n  let cellIndex = 0;\n\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      fieldCells[cellIndex].id = `${x}-${y}`;\n\n      const value = gameField[x][y];\n\n      updateCell(fieldCells[cellIndex], value);\n\n      cellIndex++;\n    }\n  }\n\n  randomizer();\n  randomizer();\n}\n\nfunction gameWin() {\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      if (gameField[x][y] === 2048) {\n        messageWin.classList.remove('hidden');\n        messageRules.classList.add('hidden');\n\n        if (button.classList.contains('restart')) {\n          button.classList.replace('restart', 'start');\n\n          button.innerText = 'Start';\n        }\n      }\n    }\n  }\n}\n\nfunction gameOver() {\n  if (hasEmptyCell()) {\n    return;\n  }\n\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols - 1; y++) {\n      if (gameField[x][y] === gameField[x][y + 1]\n        || gameField[y][x] === gameField[y + 1][x]) {\n        return;\n      }\n    }\n  }\n\n  if (button.classList.contains('restart')) {\n    button.classList.replace('restart', 'start');\n\n    button.innerText = 'Start';\n  }\n\n  messageRules.classList.add('hidden');\n  messageLose.classList.remove('hidden');\n}\n\nbutton.addEventListener('click', () => {\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageRules.classList.remove('hidden');\n\n  gameScore.innerText = '0';\n\n  if (button.classList.contains('start')) {\n    button.classList.replace('start', 'restart');\n\n    button.innerText = 'Restart';\n  }\n\n  gameStart();\n});\n\ndocument.addEventListener('keyup', (key) => {\n  if (button.classList.contains('restart')) {\n    if (key.code === 'ArrowUp') {\n      verticalMove('up');\n      randomizer();\n    }\n\n    if (key.code === 'ArrowDown') {\n      verticalMove('down');\n      randomizer();\n    }\n\n    if (key.code === 'ArrowLeft') {\n      horizontalMove('left');\n      randomizer();\n    }\n\n    if (key.code === 'ArrowRight') {\n      horizontalMove('right');\n      randomizer();\n    }\n  }\n\n  gameWin();\n  gameOver();\n});\n"]}